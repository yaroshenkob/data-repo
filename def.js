Object.keys(categoryPages).forEach(categoryPath => {
   const products = categoryPages[categoryPath];


   // –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–µ—Ä—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É
   const firstProduct = products[0];
   const categoryId = firstProduct.categoryBaza_id;

   // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
   const mainCategory = categories.find(cat => cat._id === categoryId);

   // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ —Ü—ñ—î—ó –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–≤ —É—Å—ñ—Ö –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö)
   const allProductsInMainCategory = offers.filter(offer => offer.categoryBaza_id === categoryId);

   // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ ID –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —Ü–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
   const subcategoryIds = new Set();
   allProductsInMainCategory.forEach(product => {
      if (product.categoryId && product.categoryId !== product.categoryBaza_id) {
         subcategoryIds.add(product.categoryId);
      }
   });

   // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
   const subcategories = [];
   subcategoryIds.forEach(subId => {
      const subcategory = categories.find(cat => cat._id === subId);
      if (subcategory) {
         subcategories.push(subcategory);
      }
   });

   // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –º–∏ –≤ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
   const pathSegments = categoryPath.split(path.sep);
   const currentDirName = pathSegments[pathSegments.length - 1];
   const isInSubcategory = currentDirName !== mainCategory["data-href"];




   let categoryMore = [...new Set(categoryNames)].join(', ');

   for (let i = 0; i < products.length; i += itemsPerPage) {
      const pageIndex = i / itemsPerPage + 1;
      const pageFilePath = path.join(categoryPath, `page${pageIndex}.html`);

      let categoryURL;
      let categoryName;
      let categoryBaza;

      categories.forEach(category => {
         if (category._id == products[i].categoryBaza_id) {
            let res = category["data-href"];
            categoryURL = res.slice(2);
            categoryName = category.name;
            categoryBaza = category;
         }

      })


      ///////////////////////////////////////////////////////////////////////////////////////////
      //// node script.js

      // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ HTML-–∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤
      const productItems = products.slice(i, i + itemsPerPage).map(offer => {
         // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ü—ñ–Ω—É —Ç–∞ –∑–Ω–∏–∂–∫—É
         const price = offer.price ? `&#8372;${parseFloat(offer.price)}` : "–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞";
         const oldPrice = offer.old_price && offer.old_price !== '0'
            ? `<br><span>&#8372; ${parseFloat(offer.old_price)}</span>`
            : "";

         const sale = offer.old_price && offer.old_price !== '0'
            ? `<span class="sale">-${parseFloat(offer.old_price) - parseFloat(offer.price)} &#8372;</span>`
            : "";
         // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É

         const availabilityText = offer.available
            ? `${price}${oldPrice}`
            : `–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ`;
         return `
         <a href="/${categoryURL}/${offer.myURL}">
         <div id="${offer._id}" class="item-goods">
            ${sale}
            <div class="item-top">
               <img class="lazyload" src="/img/preloader.gif" data-src="/imgs/${offer.pictureMY[0]}" alt="image">
            </div>
            <div class="item-bottom">
               <h3>${offer.name_ua}</h3>
               <p>${availabilityText}</p>
               <button class="add-to-card"><span></span><span></span></button>
            </div>
         </div>
      </a>
      `
      }).join('');

      // –ì–µ–Ω–µ—Ä—É—î–º–æ Schema.org JSON-LD –¥–ª—è –≤—Å—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      const schemaProducts = products.slice(i, i + itemsPerPage).map(offer => {
         const productUrl = `https://kiko-store.com.ua/${categoryURL}/${offer.myURL}`;
         const imageUrl = `https://kiko-store.com.ua/imgs/${offer.pictureMY[0]}`;
         const schemaAvailability = offer.available
            ? "InStock"
            : "OutOfStock";

         return {
            "@type": "Product",
            "name": offer.name_ua,
            "url": productUrl,
            "image": imageUrl,
            "sku": offer.vendorCode,
            "offers": {
               "@type": "Offer",
               "priceCurrency": "UAH",
               "price": offer.price ? `${parseFloat(offer.price).toString()}.00` : "0",
               "itemCondition": "https://schema.org/NewCondition",
               "availability": schemaAvailability,
               "seller": {
                  "@type": "Organization",
                  "name": "Kiko Store"
               }
            }
         };
      });




      const schemaScript = `
         <script type="application/ld+json">
         {
            "@context": "https://schema.org",
            "@type": "CollectionPage",
            "name": "${categoryName} ‚Äì –°—Ç–æ—Ä—ñ–Ω–∫–∞ ${pageIndex}",
            "description": "${categoryName} - –í–µ–ª–∏–∫–∏–π –≤–∏–±—ñ—Ä —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ",
            "url": "https://kiko-store.com.ua/${categoryURL}/page${pageIndex}",
            "hasPart": ${JSON.stringify(schemaProducts)}
         }
         </script>
      `;




      const pageContent = ``;


      pageWritePromises.push(fs.promises.writeFile(pageFilePath, pageContent));
   }
});